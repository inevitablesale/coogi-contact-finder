{
  "version": 3,
  "sources": ["../background.js"],
  "sourcesContent": ["import { createClient } from '@supabase/supabase-js';\n\nconst SUPABASE_URL = \"https://dbtdplhlatnlzcvdvptn.supabase.co\";\nlet supabase = null;\nlet userToken = null;\nlet userId = null;\n\nlet isSubscribed = false;\nlet isTaskActive = false;\nlet cooldownActive = false;\n\nconst taskQueue = [];\n\n// \u2705 Initialize Supabase client\nfunction initSupabase(token) {\n  supabase = createClient(SUPABASE_URL, {\n    global: {\n      headers: { Authorization: `Bearer ${token}` },\n    },\n  });\n}\n\n// \u2705 Listen for messages\nchrome.runtime.onMessage.addListener(async (message, sender, sendResponse) => {\n  if (message.type === \"SET_TOKEN\") {\n    userToken = message.token;\n    userId = message.userId;\n    initSupabase(userToken);\n\n    if (!isSubscribed) {\n      subscribeToTasks();\n      isSubscribed = true;\n      console.log(\"\u2705 Subscribed to Supabase changes\");\n    }\n\n    sendResponse({ status: \"Token received\" });\n  }\n\n  if (message.action === \"scrapedData\") {\n    const { taskId, contacts, error } = message;\n\n    if (error) {\n      console.error(`\u274C Scraping error for task ${taskId}: ${error}`);\n      await updateTaskStatus(taskId, \"error\", error);\n      await logError(taskId, error);\n      chrome.action.setBadgeText({ text: \"ERR\" });\n    } else {\n      try {\n        const { error: insertError } = await supabase.from(\"contacts\").insert(\n          contacts.map((c) => ({\n            opportunity_id: c.opportunityId,\n            name: c.name,\n            job_title: c.title,\n            linkedin_profile_url: c.profileUrl,\n            email: c.email || null,\n          }))\n        );\n\n        if (insertError) throw insertError;\n        await updateTaskStatus(taskId, \"complete\");\n        chrome.action.setBadgeText({ text: \"\" });\n        console.log(`\u2705 Task ${taskId} completed with ${contacts.length} contacts`);\n      } catch (err) {\n        console.error(`\u274C DB error for task ${taskId}: ${err.message}`);\n        await logError(taskId, err.message);\n        await updateTaskStatus(taskId, \"error\", err.message);\n      }\n    }\n\n    if (sender.tab?.id) chrome.tabs.remove(sender.tab.id);\n\n    isTaskActive = false;\n    startCooldown();\n    setTimeout(() => processQueue(), 1000);\n  }\n});\n\n// \u2705 Supabase subscription\nfunction subscribeToTasks() {\n  supabase\n    .channel(\"contact_enrichment_tasks\")\n    .on(\"postgres_changes\", { event: \"INSERT\", schema: \"public\", table: \"contact_enrichment_tasks\" }, async (payload) => {\n      const task = payload.new;\n      if (task.status === \"pending\" && task.user_id === userId) {\n        enqueueTask(task);\n      }\n    })\n    .subscribe();\n}\n\n// \u2705 Queue management\nfunction enqueueTask(task) {\n  taskQueue.push(task);\n  processQueue();\n}\n\nasync function processQueue() {\n  if (isTaskActive || cooldownActive || taskQueue.length === 0) return;\n  const nextTask = taskQueue.shift();\n  await handleTask(nextTask);\n}\n\n// \u2705 Task handler\nasync function handleTask(task) {\n  const { company_name, id: taskId } = task;\n\n  try {\n    isTaskActive = true;\n    chrome.action.setBadgeText({ text: \"RUN\" });\n    await updateTaskStatus(taskId, \"processing\");\n\n    const searchUrl = `https://www.linkedin.com/search/results/people/?keywords=${encodeURIComponent(company_name)}`;\n    const tab = await chrome.tabs.create({ url: searchUrl, active: false });\n\n    await waitRandom(3000, 6000); // Human-like delay\n    await chrome.scripting.executeScript({\n      target: { tabId: tab.id },\n      files: [\"content.js\"],\n    });\n\n    chrome.tabs.sendMessage(tab.id, {\n      action: \"scrapeEmployees\",\n      company: company_name,\n      taskId,\n      opportunityId: task.opportunity_id,\n    });\n  } catch (error) {\n    console.error(`\u274C Task ${taskId} failed: ${error.message}`);\n    await updateTaskStatus(taskId, \"error\", error.message);\n    await logError(taskId, error.message);\n    chrome.action.setBadgeText({ text: \"ERR\" });\n    isTaskActive = false;\n    startCooldown();\n  }\n}\n\n// \u2705 Update task status in DB\nasync function updateTaskStatus(taskId, status, errorMessage = null) {\n  await supabase.from(\"contact_enrichment_tasks\").update({ status, error_message: errorMessage }).eq(\"id\", taskId);\n}\n\n// \u2705 Log errors\nasync function logError(taskId, message, page = null) {\n  await supabase.from(\"scrape_logs\").insert([{ task_id: taskId, message, page_number: page, created_at: new Date().toISOString() }]);\n}\n\n// \u2705 Utilities\nfunction waitRandom(min, max) {\n  return new Promise((resolve) => setTimeout(resolve, Math.floor(Math.random() * (max - min + 1)) + min));\n}\n\nfunction startCooldown() {\n  cooldownActive = true;\n  const cooldownTime = Math.floor(Math.random() * (90000 - 30000 + 1)) + 30000;\n  console.log(`\u23F3 Cooldown for ${cooldownTime / 1000}s`);\n  setTimeout(() => {\n    cooldownActive = false;\n    processQueue();\n  }, cooldownTime);\n}"],
  "mappings": "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",
  "names": ["import_supabase_js", "SUPABASE_URL", "supabase", "userToken", "userId", "isSubscribed", "isTaskActive", "cooldownActive", "taskQueue", "initSupabase", "token", "message", "sender", "sendResponse", "subscribeToTasks", "taskId", "contacts", "error", "updateTaskStatus", "logError", "insertError", "c", "err", "startCooldown", "processQueue", "payload", "task", "enqueueTask", "nextTask", "handleTask", "company_name", "searchUrl", "tab", "waitRandom", "status", "errorMessage", "page", "min", "max", "resolve", "cooldownTime"]
}
